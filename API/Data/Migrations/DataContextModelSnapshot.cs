// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Greenbush",
                            Country = "Martinique",
                            Created = new DateTime(2020, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1956, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            Interests = "Sit sit incididunt proident velit.",
                            Introduction = "Sunt esse aliqua ullamco in incididunt consequat commodo...",
                            KnownAs = "Lisa",
                            LastActive = new DateTime(2020, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = new byte[] { 174, 243, 36, 86, 113, 34, 199, 130, 223, 251, 132, 205, 16, 218, 173, 22, 192, 8, 8, 117, 78, 47, 41, 121, 167, 229, 72, 18, 49, 235, 11, 110, 237, 165, 230, 50, 9, 248, 141, 119, 179, 78, 167, 150, 75, 148, 200, 13, 172, 233, 206, 67, 9, 100, 52, 20, 23, 168, 92, 182, 39, 223, 82, 78 },
                            PasswordSalt = new byte[] { 156, 88, 34, 45, 26, 49, 20, 8, 148, 78, 223, 91, 221, 93, 83, 92, 231, 176, 74, 103, 7, 194, 206, 152, 149, 137, 46, 211, 162, 251, 213, 184, 36, 6, 26, 35, 33, 14, 94, 208, 72, 189, 111, 91, 225, 58, 102, 211, 118, 246, 24, 241, 32, 248, 58, 46, 98, 140, 84, 77, 155, 105, 223, 167, 78, 17, 217, 221, 73, 11, 251, 90, 124, 96, 94, 101, 204, 31, 55, 112, 92, 14, 159, 63, 209, 8, 240, 97, 71, 251, 26, 183, 93, 145, 25, 172, 177, 66, 163, 37, 158, 119, 165, 218, 205, 90, 63, 237, 217, 174, 42, 204, 3, 13, 91, 9, 100, 217, 7, 79, 9, 52, 133, 153, 75, 230, 72, 247 },
                            UserName = "Lisa"
                        });
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            IsMain = true,
                            PublicId = "PublicId1",
                            Url = "https://randomuser.me/api/portraits/women/54.jpg"
                        });
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
